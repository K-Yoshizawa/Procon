/**
 * @brief 最小全域木に関する情報。最小コストと残した辺番号を保持している。
 * 
 * @tparam T グラフの辺の重みの型
 */
template<typename T>
struct MST_Result{
    T totalcost;
    set<int> remain_edge;

    MST_Result() : totalcost(0) {}
};

/**
 * @brief 最小全域木を求める。依存ライブラリとしてUnionFindが必要。
 * 
 * @tparam T 
 * @param graph グラフ
 * @return MST_Result<T> 最小コストと、最小全域木の辺番号集合
 */
template<typename T>
MST_Result<T> Kruskal(Graph<T> &graph){
    auto &edges = graph.edges;
    sort(edges.begin(), edges.end());
    UnionFind uf(graph.vertex.size());
    MST_Result<T> result;
    for(auto &e : edges){
        if(!uf.same(e.from, e.to)){
            uf.unite(e.from, e.to);
            result.totalcost += e.cost;
            result.remain_edge.insert(e.id);
        }
    }
    sort(edges.begin(), edges.end(), [](const Edge<T> &e1, const Edge<T> &e2){
        return e1.id < e2.id;
    });
    return result;
}